name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        c_compiler: [gcc]
        cpp_compiler: [g++]
        build_type: [Release]
        include:
          - os: windows-latest
            mingw: true
          - os: ubuntu-latest
            mingw: false
          - os: macos-latest
            mingw: false

    steps:
      - uses: actions/checkout@v3

      - name: Set up MSYS2 environment
        if: matrix.mingw
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: mingw-w64-x86_64-gcc mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          echo "install-prefix=${{ github.workspace }}" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }} 
          -G Ninja 
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} 
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} 
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{matrix.build_type}}

      - name: Install
        run: cmake --install ${{ steps.strings.outputs.build-output-dir }} --prefix ${{ steps.strings.outputs.install-prefix }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest -C ${{ matrix.build_type }}

      - name: Compress binaries
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ladr-windows.zip ${{ steps.strings.outputs.install-prefix }}/bin
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            tar czf ladr-linux.tar.gz ${{ steps.strings.outputs.install-prefix }}/bin
          else
            tar czf ladr-darwin.tar.gz ${{ steps.strings.outputs.install-prefix }}/bin
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ladr-${{ matrix.os }}
          path: |
            ladr-windows.zip
            ladr-linux.tar.gz
            ladr-darwin.tar.gz
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/ladr-ubuntu-latest/ladr-linux.tar.gz
            artifacts/ladr-windows-latest/ladr-windows.zip
            artifacts/ladr-macos-latest/ladr-darwin.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 